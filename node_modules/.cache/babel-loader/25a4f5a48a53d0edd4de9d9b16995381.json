{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/enock/Development/code/phase-2/project/proj/phase2-project/src/context/GlobalState.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Swal from 'sweetalert2'; // creating `context`\n\nconst StateContext = /*#__PURE__*/React.createContext();\n\nfunction StateProvider({\n  children\n}) {\n  _s();\n\n  // defining `state` for our product data\n  const [products, setProducts] = useState([]); // defining `state` for our cart data\n\n  const [cartItems, setCartItems] = useState([]); // defining `state` for calculating total amount\n\n  const [total, setTotal] = useState(0); // defining `state` for counting total items in\n\n  const [totalItems, setTotalItems] = useState(0); // defining `state` for favorite product data\n\n  const [favoriteItems, setFavoriteItems] = useState([]); // fetching product data\n\n  const url = \"\";\n  useEffect(() => {\n    fetch(url).then(response => response.json()) // get json data from api\n    .then(data => setProducts(data)); // save data to `state` \n  }, []); // calculate cart quantity\n\n  function calcQuantity() {\n    const totalQty = cartItems.reduce((total, product) => total + product.quantity, 0);\n    setTotalItems(totalQty);\n  } // addToCart button functionality\n\n\n  function addToCart(product) {\n    // check if the newly added product is already in cart by getting it's index\n    const index = cartItems.findIndex(item => item.id === product.id); // if index not found push it to cart & set quantity to 1 else update the quantity only\n\n    if (index === -1) {\n      cartItems.push({ ...product,\n        quantity: 1\n      });\n    } else {\n      cartItems[index].quantity += 1;\n    } // update cart quantity\n\n\n    calcQuantity();\n  } // removeFromCart button functionality\n\n\n  function removeFromCart(product) {\n    // remove product from cart\n    cartItems.pop(product); // update cart quantity\n\n    calcQuantity();\n  } // counter increase button functionality\n\n\n  function increaseCount(id) {\n    // check if the newly added product is already in cart by getting it's index\n    const index = cartItems.findIndex(item => item.id === id); // increase the quantity by 1 \n\n    cartItems[index].quantity += 1; // update cart quantity\n\n    calcQuantity();\n  } // counter decrease button functionality\n\n\n  function decreaseCount(id) {\n    // check if the newly added product is already in cart by getting it's index\n    const index = cartItems.findIndex(item => item.id === id); // decrease the quantity by 1\n\n    cartItems[index].quantity -= 1; // update cart quantity\n\n    calcQuantity();\n  } // addToFavorite button functionality\n\n\n  function addToFavorite(newItem) {\n    setFavoriteItems(prevItems => [...prevItems, newItem]);\n  } // removeFromFavorite button functionality\n\n\n  function removeFromFavorite(id) {\n    setFavoriteItems(prevItems => prevItems.filter(item => item.id !== id));\n  }\n\n  function resetCart() {\n    setCartItems([]);\n    setTotalItems(0);\n  }\n\n  function checkOutCart() {\n    resetCart();\n    Swal.fire('Congrats!', 'You successfully placed an order!', 'success');\n  }\n\n  useEffect(() => {\n    // calculate total bill\n    const totalPrices = cartItems.reduce((total, product) => total + product.price * product.quantity, 0).toFixed(2);\n    setTotal(totalPrices);\n  }, [totalItems, cartItems]);\n  return /*#__PURE__*/_jsxDEV(StateContext.Provider, {\n    value: {\n      products,\n      total,\n      totalItems,\n      cartItems,\n      addToCart,\n      removeFromCart,\n      favoriteItems,\n      addToFavorite,\n      removeFromFavorite,\n      increaseCount,\n      decreaseCount,\n      resetCart,\n      checkOutCart\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 9\n  }, this);\n}\n\n_s(StateProvider, \"etAt6NKE6kSZqPZI9HvGYP4EjLU=\");\n\n_c = StateProvider;\nexport { StateContext, StateProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"StateProvider\");","map":{"version":3,"sources":["/home/enock/Development/code/phase-2/project/proj/phase2-project/src/context/GlobalState.js"],"names":["React","useState","useEffect","Swal","StateContext","createContext","StateProvider","children","products","setProducts","cartItems","setCartItems","total","setTotal","totalItems","setTotalItems","favoriteItems","setFavoriteItems","url","fetch","then","response","json","data","calcQuantity","totalQty","reduce","product","quantity","addToCart","index","findIndex","item","id","push","removeFromCart","pop","increaseCount","decreaseCount","addToFavorite","newItem","prevItems","removeFromFavorite","filter","resetCart","checkOutCart","fire","totalPrices","price","toFixed"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\"\nimport Swal from 'sweetalert2'\n\n// creating `context`\nconst StateContext = React.createContext()\n\nfunction StateProvider({children}){\n    // defining `state` for our product data\n    const [products, setProducts] = useState([])\n    // defining `state` for our cart data\n    const [cartItems, setCartItems] = useState([])\n    // defining `state` for calculating total amount\n    const [total, setTotal] = useState(0);\n    // defining `state` for counting total items in\n    const [totalItems, setTotalItems] = useState(0);\n    // defining `state` for favorite product data\n    const [favoriteItems, setFavoriteItems] = useState([])\n\n    // fetching product data\n    const url = \"\"\n    \n    useEffect(() => {\n        fetch(url)\n        .then(response => response.json()) // get json data from api\n        .then(data => setProducts(data)) // save data to `state` \n    }, [])\n\n    // calculate cart quantity\n    function calcQuantity() {\n        const totalQty = cartItems.reduce((total, product) => total + product.quantity, 0)\n        setTotalItems(totalQty)\n    }\n\n    // addToCart button functionality\n    function addToCart(product){\n        // check if the newly added product is already in cart by getting it's index\n        const index = cartItems.findIndex(item => item.id === product.id);\n        // if index not found push it to cart & set quantity to 1 else update the quantity only\n        if(index === -1){\n            cartItems.push({...product, quantity:1})   \n        } else {\n            cartItems[index].quantity += 1 \n        }\n        // update cart quantity\n        calcQuantity()  \n    }\n\n    // removeFromCart button functionality\n    function removeFromCart(product){\n        // remove product from cart\n        cartItems.pop(product)\n        // update cart quantity\n        calcQuantity()\n    }\n\n    // counter increase button functionality\n    function increaseCount(id) {\n        // check if the newly added product is already in cart by getting it's index\n        const index = cartItems.findIndex(item => item.id === id);\n        // increase the quantity by 1 \n        cartItems[index].quantity += 1\n        // update cart quantity\n        calcQuantity()\n    }\n\n    // counter decrease button functionality\n    function decreaseCount(id) {\n        // check if the newly added product is already in cart by getting it's index\n        const index = cartItems.findIndex(item => item.id === id);\n        // decrease the quantity by 1\n        cartItems[index].quantity -= 1\n        // update cart quantity\n        calcQuantity()\n    }\n\n    // addToFavorite button functionality\n    function addToFavorite(newItem){\n        setFavoriteItems(prevItems => [...prevItems, newItem])\n    }\n\n    // removeFromFavorite button functionality\n    function removeFromFavorite(id){\n        setFavoriteItems(prevItems => prevItems.filter(item => item.id !== id))\n    }\n\n    function resetCart() {\n        setCartItems([])\n        setTotalItems(0)\n    }\n\n    function checkOutCart() {\n        resetCart()\n        Swal.fire(\n            'Congrats!',\n            'You successfully placed an order!',\n            'success'\n        )\n    }\n\n    \n    useEffect(() => {\n        // calculate total bill\n        const totalPrices = cartItems.reduce((total, product) => total + product.price * product.quantity, 0).toFixed(2);\n            setTotal(totalPrices);\n\n    }, [totalItems, cartItems])\n    \n    return(\n        <StateContext.Provider value={{products, total, totalItems, cartItems, addToCart, removeFromCart, favoriteItems, addToFavorite, removeFromFavorite, increaseCount, decreaseCount, resetCart, checkOutCart}}>\n            {children}\n        </StateContext.Provider>\n    )\n}\n\nexport {StateContext, StateProvider}"]},"metadata":{},"sourceType":"module"}